<!--
 Copyright (C) 2020 Fondazione Istituto Italiano di Tecnologia (IIT)
 All Rights Reserved.
-->

<scxml
    xmlns="http://www.w3.org/2005/07/scxml"
    version="1.0"
    name="DestinationMonitorStateMachine"
    initial="run"
    datamodel="ecmascript"
>

  <datamodel>
    <data id="batteryLevel" expr="0.0"/>
    <data id="destination" expr=""/>
    <data id="tickCounterTheta" expr="10"/>
    <data id="tickCounter" expr="tickCounterTheta"/>
  </datamodel>

  <parallel id="run">


    <state id="monitor">

      <!-- I (A) -->
      <state id="idleState">
        <onentry>
          <assign location="tickCounter" expr="tickCounterTheta"/>
        </onentry>
        <transition event="destinationChanged" target="idleState-b" >
          <assign location="destination" expr="_event.data.destination"/>
          <log label="DestinationMonitor/destinationChanged" expr="'destination updated: ' + destination"/>
        </transition>
      </state>

      <!-- I (B) -->
      <state id="idleState-b">
          <onentry>
            <log label="DestinationMonitor/idleState-b" expr="'destination = ' + destination"/>
          </onentry>
          <transition cond="destination == 'charging_station'" target="idleState" />
          <transition target="waitForBatteryLevelState" />
      </state>

      <!-- I2 -->
      <state id="waitForBatteryLevelState">
        <transition event="batteryLevelChanged" target="checkBatteryLevelState" />
      </state>

      <!-- C1 -->
      <state id="checkBatteryLevelState">
        <onentry>
          <log label="BatteryLevelMonitor/checkBatteryLevelState" expr="'batteryLevel = ' + batteryLevel"/>
        </onentry>
        <transition cond="batteryLevel &gt;= 30" target="waitForBatteryLevelState" />
        <transition cond="batteryLevel &lt; 30" target="checkDestinationState" />
      </state>

      <!-- BEGIN LOW BATTERY -->
      <state id="warning">

        <!-- C2 (A) -->
        <state id="checkDestinationState">
          <transition cond="destination == 'charging_station'" target="idleState" />
          <transition target="waitForTickState" />
        </state>

        <!-- C2 (B) -->
        <state id="waitForTickState">
          <transition event="tick" target="checkTickCounterState" />
        </state>

        <!-- T + D -->
        <state id="checkTickCounterState">
          <transition cond="tickCounter &gt; 0" target="checkDestinationState">
            <assign location="tickCounter" expr="tickCounter - 1"/>
          </transition>
          <transition target="failure" />
        </state>

        <!-- D -->
<!--        <state id="decrTickCounterState">
          <onentry>
            <assign location="tickCounter" expr="tickCounter - 1"/>
          </onentry>
          <transition target="checkDestinationState" />
        </state>-->

<!--        <transition event="destinationChangeRequested" cond="_event.data.destination == 'charging_station'" target="idleState" />-->
      </state> <!-- warning -->
      <!-- END LOW BATTERY -->

      <!-- Err -->
      <state id="failure" />
    </state> <!-- monitor -->

    <state id="updateBatteryLevelState">
      <state id="updateBatteryLevelState-A">
        <onentry>
          <log label="DestinationMonitor/updateBatteryLevelState-A" expr="'batteryLevel: ' + batteryLevel"/>
        </onentry>
        <transition event="batteryLevelChanged" target="updateBatteryLevelState-B" >
          <assign location="batteryLevel" expr="_event.data.level"/>
        </transition>
      </state>

      <state id="updateBatteryLevelState-B">
        <onentry>
          <log label="BatteryLevelMonitor/getLevel" expr="'batteryLevel = ' + batteryLevel"/>
        </onentry>
        <transition target="updateBatteryLevelState-A" />
      </state>
    </state>

    <state id="updateDestinationState">
      <state id="updateDestinationState-A">
        <onentry>
          <log label="DestinationMonitor/updateDestinationState-A" expr="'destination: ' + destination"/>
        </onentry>
        <transition event="destinationChanged" target="updateDestinationState-B" >
          <assign location="destination" expr="_event.data.destination"/>
        </transition>
      </state>

      <state id="updateDestinationState-B">
        <onentry>
          <log label="DestinationMonitor/getLevel" expr="'destination = ' + destination"/>
        </onentry>
        <transition target="updateDestinationState-A" />
      </state>
    </state>

  </parallel>

</scxml>
