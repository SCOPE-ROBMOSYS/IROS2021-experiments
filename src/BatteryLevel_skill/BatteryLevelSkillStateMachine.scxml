<!--
 Copyright (C) 2020 Fondazione Istituto Italiano di Tecnologia (IIT)
 All Rights Reserved.
-->

<scxml
    xmlns="http://www.w3.org/2005/07/scxml"
    version="1.0"
    name="BatteryLevelSkillStateMachine"
    initial="idle"
    datamodel="cplusplus:BatteryLevelSkillDataModel:BatteryLevelSkillDataModel.h"
    xmlns:scope="http://www.scope.org/scope"
    xmlns:scope_yarp="http://www.scope.org/scope_yarp"
    scope:skill_version="0.1"
>

<datamodel>

<!--  Services:  -->

    <data id="batteryReader"
          scope_yarp:service_type="BatteryReader"
          scope_yarp:connect_type="tcp+send.portmonitor2+file.Skill_request+type.dll"
          scope_yarp:thrift_protocol="Battery"
          scope_yarp:service_function="level"
          scope_yarp:port_name_client_attribute="default"
          scope_yarp:port_name_server="/BatteryComponent"
          />
<!--          scope_yarp:connect_type="tcp"-->

<!--  Attributes:  -->

    <data id="level"
          scope:cpp_type="double"
          expr="100.0"
          scope:init_source="initialize_inside_header"
          />

</datamodel>


    <state id="idle" scope:bt_status="SKILL_IDLE">
        <transition event="CMD_START" target="get" />
    </state>

    <state id="get" scope:bt_status="SKILL_IDLE">
        <onentry>
            <script>
            level = batteryReader.level();
            QTimer::singleShot(0, stateMachine(), [=](){
                stateMachine()->submitEvent((level > 30) ? "STATUS_SUCCESS" : "STATUS_FAILED");
            });
        </script>
    </onentry>
    <transition event="STATUS_SUCCESS" target="success" />
    <transition event="STATUS_FAILED" target="failure" />
    </state>

    <state id="success" scope:bt_status="SKILL_SUCCESS">
        <transition event="REQUEST_ACK" target="idle" />
    </state>

    <state id="failure" scope:bt_status="SKILL_FAILURE">
        <transition event="REQUEST_ACK" target="idle" />

    </state>
</scxml>
